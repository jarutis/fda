(ns fda.smoothing.rs-test
  (:use midje.sweet
        fda.smoothing.rs)
  (:require [clojure.core.matrix :as m]
            [clojure.core.matrix.stats :as s]
            [fda.utils :as utils]))

(facts "about knot spacing"
  (fact "knots can be spaced uniformly"
    (knot-positions [0 6] 5 :type :uniform) => (m/array [1 2 3 4 5]))
  (fact "knots can be spaced based on quantiles"
    (m/to-nested-vectors (knot-positions [0 1 2 4 7 8 9 10 11] 5 :type :quantile)) =>
    (just (map roughly [1.0 3.0 7.0 8.5 10.0]))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Reproduced examples from Jin-Ting Zhang - Analysis of Variance for Functional
;; Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example 2.4

(def non-progesterone5
  [[-8  -0.593093]
   [-7  -0.429571]
   [-6  -0.377387]
   [-5  -0.546512]
   [-4  -0.801711]
   [-3  -0.824439]
   [-2  -0.614978]
   [-1  -0.623330]
   [ 0   0.167002]
   [ 1   0.387835]
   [ 2   0.835669]
   [ 3   0.979743]
   [ 4   1.530084]
   [ 5   1.572897]
   [ 6   1.764588]
   [ 7   1.865436]
   [ 8   2.115273]
   [ 9   1.862203]
   [ 10  2.139825]
   [ 11  1.845655]
   [ 12  1.428357]
   [ 13  1.121144]
   [ 14  0.811887]])

(def example24-knots [-4.3333 -0.6667 3.0000 6.6667 10.3333])

(def example24-fit
  [-0.584766 -0.432890 -0.412740 -0.524318 -0.749034 -0.845213 -0.738497 -0.428884
   0.026326 0.440919 0.800569 1.105276 1.365970 1.593582 1.788113 1.946697 2.032100
   2.032866 1.948993 1.780240 1.525818 1.185667 0.759786])

(def example24-se
  [0.112956 0.068022 0.076851 0.073122 0.059493 0.068861 0.070591 0.059274 0.061531
   0.070511 0.065846 0.056146 0.065846 0.070511 0.061531 0.059274 0.070591 0.068861
   0.059493 0.073122 0.076851 0.068022 0.112956])

(facts "about truncated power basis"
  (let [series (truncated-power-basis 2 :knots example24-knots)]
    (m/to-nested-vectors (series -8)) => (just (map roughly [1 -8 64 0 0 0 0 0]))
    (m/to-nested-vectors (series 0)) =>
    (just (map roughly [1  0 0 18.7777 0.4444 0 0 0]))
    (m/to-nested-vectors (series 14)) =>
    (just (map roughly [1 14 196 336.1111 215.1111 121 53.7777 13.4444]))))

(facts "about regression spline fit"
  (fact "regression spline fit matches example 2.4"
    (fit non-progesterone5 :number-of-knots 5) => (just (map roughly example24-fit)))
  (fact "significance level matches example 2.4"
    (:se (significance non-progesterone5 :number-of-knots 5)) =>
    (just (map roughly example24-se))))

(facts "about knot number selection"
  (select-knot-number non-progesterone5 2 :uniform) => 5)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example 2.5

(def example25-gcv
  [8.128687 0.955071 1.059812 1.172655 0.727110 0.529769 0.630702 0.680208
   0.694678 0.896263 1.011632 1.200467])

(facts "gcv calculation"
  (let [data non-progesterone5
        [x y] (m/slices data 1)
        gcv (fn [n] (utils/gcv y (fit data :number-of-knots n) (+ n 2 1)))]
    (map gcv (knot-numbers data)) => (just (map roughly example25-gcv))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example 2.6

(def temperature5-time (map #(+ % 0.5) (range 365)))
(def temperature5-obs
  [-5.8 -5.6 -7.3 -7 -6.7 -8.9 -7.5 -6.9 -8.9 -8.8 -9.3 -9.5 -9.1 -8.4 -7.8 -10
   -9.7 -9.1 -9.1 -9.2 -10.1 -9.2 -7.4 -6.6 -6.8 -7 -6.7 -7.6 -7.9 -8.2 -9.4 -9.9
   -8.8 -8.3 -9 -9.8 -10.4 -10 -8.3 -8 -8.9 -8.7 -9.6 -8.1 -7.4 -7.5 -7.4 -9.6
   -9.8 -7.8 -6.2 -6.9 -6.7 -7 -7.8 -7.6 -7.4 -7.7 -6.7 -6.4 -6.1 -6.4 -6 -5.2
   -5.4 -4.8 -4.7 -6.3 -5 -4.3 -5.1 -5.5 -4.1 -3.1 -3.4 -3 -3.2 -3 -2.8 -3.2 -2.6
   -2.4 -1.2 -1.1 -0.3 -0.3 -0.6 -0.3 -0.2 -0.7 0 0.3 0.4 0.7 1.4 1.2 1.4 0.7 0.6
   1.4 1.3 0.7 1 1.6 2 2.9 3.3 3.2 2.5 3.1 4 3.7 3.4 3.2 3 4 4.8 4.1 4.3 5.3 5.6
   6.2 6.2 6.3 6.3 6.3 5.9 6.6 7.2 7.5 8 8.9 8.8 8.6 8.4 9.5 9.4 8.6 10 10.2 10.8
   10.6 9.6 9.2 9.6 9.8 10.4 10.6 12.3 12.1 12 12.1 12.1 12.4 12.1 11.6 12.2 12.5
   13.4 13.2 12.8 12.9 13 13.7 13.3 14.4 15.3 15.3 15.7 16.7 16.4 16.2 16.1 16.4
   16.3 15.6 15.5 16.3 16.4 16.6 16.8 16.4 16.4 16.4 16.9 17.1 16.7 17.2 18.3
   18.3 18.5 18.2 17.7 18.2 18.2 18.2 18.9 19.1 19 19.4 19.2 19.1 18.1 18 18.9
   19.3 19.5 19.2 19.3 19.3 19.1 19 19.3 19.1 19.6 19.8 19 18.9 19 19.3 19.3 19.2
   19 18.7 18.4 18.5 18 18 18.4 18.2 17.3 17.3 17 16.8 16.3 15.8 16.4 16.7 17.2
   17.1 17.1 16.5 16.1 15.5 15.6 15 14.4 15 15.4 14.8 14.6 15 15 14.2 13.4 13.1
   13 13.5 13.1 13.3 13.1 12.5 12.2 13.2 13.1 13 12.3 11.9 12.3 12 11.8 11.1 10.8
   10.5 11.8 11.6 10.1 9 9.7 9.9 9.5 9 8.6 8.2 9.1 8.6 8.2 8.5 7.9 7.3 7.6 7.6
   6.3 6.9 6.7 6.8 7 7.3 7 6 5.9 6.3 5 5 5.7 5.7 5.2 6.4 5.5 5 4.7 3.5 3.8 3 3.7
   3.3 3.2 2.8 2.3 1.6 2.2 2.4 0.9 0.7 1 1.3 0.3 0.8 0.2 0.4 0.2 0.6 1.1 -0.3
   -0.7 -1.2 -1.4 -1.3 -2.1 -1.2 -1.3 -3.5 -3.2 -2.9 -3.7 -4.1 -4.2 -4.2 -3.9
   -3.8 -3.8 -4.9 -6.6 -7.1 -6.2 -4.9 -4.9 -5.1 -5 -5.1 -7.7 -6.9 -4.8 -6.1
   -6.9])

(def temperature5 (m/transpose [temperature5-time temperature5-obs]))

(def example26-fit
  [-5.68 -6.18 -6.62 -7.03 -7.38 -7.70 -7.96 -8.18 -8.37 -8.53 -8.69 -8.84
   -8.99 -9.12 -9.24 -9.35 -9.41 -9.39 -9.28 -9.10 -8.84 -8.50 -8.07 -7.63 -7.32
   -7.15 -7.12 -7.23 -7.49 -7.89 -8.43 -8.91 -9.28 -9.54 -9.68 -9.71 -9.62 -9.42
   -9.16 -8.92 -8.71 -8.53 -8.37 -8.24 -8.14 -8.06 -7.99 -7.92 -7.85 -7.78 -7.71
   -7.64 -7.58 -7.50 -7.40 -7.27 -7.12 -6.95 -6.75 -6.53 -6.28 -6.06 -5.85 -5.66
   -5.48 -5.33 -5.19 -5.07 -4.94 -4.80 -4.63 -4.45 -4.25 -4.02 -3.78 -3.53 -3.27
   -3.00 -2.73 -2.45 -2.17 -1.88 -1.59 -1.31 -1.04 -0.78 -0.54 -0.30 -0.08 0.14
   0.33 0.49 0.63 0.73 0.80 0.85 0.86 0.85 0.88 0.95 1.08 1.27 1.50 1.78 2.12
   2.45 2.74 2.99 3.19 3.34 3.45 3.51 3.54 3.61 3.72 3.88 4.08 4.33 4.63 4.97
   5.31 5.63 5.92 6.19 6.44 6.67 6.87 7.05 7.26 7.49 7.74 8.01 8.31 8.62 8.95
   9.25 9.50 9.70 9.84 9.93 9.97 9.96 9.93 9.97 10.07 10.23 10.46 10.74 11.09
   11.49 11.84 12.12 12.33 12.46 12.53 12.52 12.45 12.38 12.39 12.50 12.69 12.96
   13.32 13.77 14.28 14.73 15.12 15.45 15.71 15.90 16.03 16.09 16.12 16.15 16.18
   16.21 16.23 16.25 16.27 16.30 16.35 16.43 16.53 16.67 16.83 17.03 17.25 17.46
   17.66 17.85 18.02 18.18 18.32 18.44 18.55 18.65 18.73 18.79 18.83 18.86 18.88
   18.88 18.88 18.90 18.93 18.96 19.01 19.07 19.14 19.20 19.26 19.30 19.32 19.34
   19.34 19.32 19.29 19.25 19.20 19.14 19.07 18.98 18.88 18.78 18.65 18.50 18.34
   18.16 17.95 17.73 17.49 17.24 17.03 16.85 16.70 16.59 16.52 16.48 16.47 16.45
   16.40 16.31 16.19 16.04 15.86 15.65 15.42 15.19 14.97 14.75 14.53 14.32 14.11
   13.91 13.72 13.56 13.41 13.29 13.18 13.09 13.02 12.96 12.88 12.78 12.68 12.55
   12.42 12.27 12.10 11.92 11.72 11.51 11.29 11.05 10.79 10.52 10.25 10.00 9.76
   9.53 9.31 9.11 8.92 8.74 8.57 8.39 8.22 8.05 7.88 7.71 7.54 7.38 7.22 7.07
   6.91 6.77 6.62 6.48 6.35 6.22 6.09 5.97 5.86 5.75 5.65 5.55 5.43 5.27 5.09
   4.88 4.64 4.37 4.07 3.76 3.45 3.16 2.86 2.58 2.30 2.02 1.76 1.52 1.31 1.14
   0.99 0.88 0.79 0.74 0.67 0.57 0.43 0.25 0.04 -0.22 -0.51 -0.82 -1.13 -1.43
   -1.73 -2.01 -2.29 -2.56 -2.83 -3.09 -3.35 -3.62 -3.89 -4.16 -4.44 -4.71 -4.97
   -5.19 -5.36 -5.50 -5.59 -5.63 -5.64 -5.61 -5.61 -5.66 -5.77 -5.92 -6.12 -6.37
   -6.67])

(fact "temperature curve fits according to example 2.6"
  (fit temperature5 :number-of-knots 48) => (just (map #(roughly % 1E-2) example26-fit)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Example 2.7

(def example27-gcv
  [4409.1 2054.2 358.50 304.37 268.19 196.73 220.72 201.53 198.12 194.77 186.89
   192.59 191.62 188.09 183.85 182.96 182.50 175.65 177.59 172.34 168.50 165.71
   165.44 167.92 167.48 168.53 167.64 171.76 166.68 173.60 164.45 168.34 161.10
   162.03 153.45 156.74 152.45 156.60 156.91 157.95 164.42 158.70 165.83 162.06
   164.03 158.61 158.28 155.53 149.25 152.46 154.07])

(facts "gcv calculation matches example 2.7"
  (let [data temperature5
        [x y] (m/slices data 1)
        gcv (fn [n] (utils/gcv y (fit data :number-of-knots n) (+ n 2 1)))]
    (pmap gcv (knot-numbers data)) => (just (map roughly example27-gcv))))
